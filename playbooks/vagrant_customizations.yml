---
- name: Add systemd.unified_cgroup_hierarchy=0 to grub boot command(s)
  hosts:
    - k8s_workers
    - k8s_controllers
  tags: add_systemd_cgroup_hierarchy
  vars:
    default_grub_path: /etc/default/grub

  tasks:
    - name: Register the default grub configuration file inode
      ansible.builtin.stat:
        path: "{{ default_grub_path }}"
      become: true
      register: default_grub_config_inode

    - name: Initial check if systemd.unified_cgroup_hierarchy=0 is added to GRUB_CMDLINE_LINUX_DEFAULT
      ansible.builtin.lineinfile:
        state: absent
        path: "{{ default_grub_path }}"
        regexp: '^GRUB_CMDLINE_LINUX_DEFAULT="\${GRUB_CMDLINE_LINUX_DEFAULT} systemd.unified_cgroup_hierarchy=0"'
      check_mode: true
      changed_when: false
      become: true
      register: line_check
      when: default_grub_config_inode.stat.exists

    - name: Add systemd.unified_cgroup_hierarchy=0 to GRUB_CMDLINE_LINUX_DEFAULT
      ansible.builtin.import_role:
        name: cavcrosby.general.managed_lineinfile
      vars:
        managed_lineinfile_path: "{{ default_grub_path }}"
        managed_lineinfile_regexp: '^GRUB_CMDLINE_LINUX_DEFAULT="\${GRUB_CMDLINE_LINUX_DEFAULT} systemd.unified_cgroup_hierarchy=0"'
        managed_lineinfile_line: GRUB_CMDLINE_LINUX_DEFAULT="${GRUB_CMDLINE_LINUX_DEFAULT} systemd.unified_cgroup_hierarchy=0"
      become: true
      when: default_grub_config_inode.stat.exists

    - name: Update grub.cfg
      vars:
        grub_config_path: /boot/grub/grub.cfg
      block:
        - name: Register the current grub configuration file inode
          ansible.builtin.stat:
            path: "{{ grub_config_path }}"
            checksum_algorithm: sha256
          become: true
          register: current_grub_config_inode

        - name: Update grub.cfg (debian-like)
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: |
              set -o pipefail
              grub-mkconfig --output "{{ grub_config_path }}"
              sha256sum "{{ grub_config_path }}" | gawk --field-separator " " '{ print $1 }'
          changed_when: current_grub_config_inode.stat.checksum != grub_config_checksum.stdout
          become: true
          register: grub_config_checksum
          when:
            - default_grub_config_inode.stat.exists
            - ansible_os_family | lower == "debian"

    - name: Reboot hosts to have new boot parameter(s) take effect
      ansible.builtin.reboot:
      become: true
      when:
        - default_grub_config_inode.stat.exists
        - line_check.found == 0

- name: Remove preset Vagrant box configurations
  hosts:
    - k8s_workers
    - k8s_controllers
  tags: remove_preset_vagrant_box_configs

  tasks:
    - name: Get the current merged netplan configuration
      ansible.builtin.command: netplan get all
      changed_when: false
      become: true
      register: current_netplan_config

    # The generic/ubuntu2204 vagrant box has DNS configs that causes
    # /run/systemd/resolve/resolv.conf to have too many DNS nameservers added to it.
    # Hence the need to undo some of the box's configs, for reference on how the
    # box is configured in regards to DNS:
    # https://github.com/lavabit/robox/blob/master/scripts/ubuntu2204/network.sh
    #
    # This above issue collides with Kubernetes when it tries to use the mentioned
    # 'resolv.conf'. For reference on the issue I saw:
    # https://github.com/kubernetes/kubernetes/issues/82756
    - name: Remove created netplan yaml
      ansible.builtin.file:
        path: /etc/netplan/01-netcfg.yaml
        state: absent
      become: true
      notify:
        - Apply netplan configurations
        - Restart systemd-networkd
        - Restart systemd-resolved

    # defaults can be restored when deleting th resolved.conf and all drop-ins
    - name: Set the systemd resolved.conf configuration back to defaults
      ansible.builtin.file:
        path: /etc/systemd/resolved.conf
        state: absent
      become: true
      notify:
        - Restart systemd-networkd
        - Restart systemd-resolved

  handlers:
    - name: Apply netplan configurations
      ansible.builtin.shell: |
        netplan generate
        netplan get all
      changed_when: current_netplan_config.stdout != netplan_config.stdout
      become: true
      register: netplan_config

    - name: Restart systemd-networkd
      ansible.builtin.systemd:
        name: systemd-networkd
        enabled: true
        state: restarted
      become: true

    - name: Restart systemd-resolved
      ansible.builtin.service:
        name: systemd-resolved
        state: restarted
      become: true
