---
- name: Perform initial setup for k8s_controller
  hosts: k8s_controllers
  tags: do_initial_k8s_controller_setup

  roles:
    - k8s_node

  tasks:
    - name: Setup the Python virtual environment
      ansible.builtin.include_role:
        name: python_virtualenv
      vars:
        python_virtualenv_name: "{{ ansible_user_python_virtualenv_name }}"
        python_virtualenvs_path: "{{ ansible_user_python_virtualenvs_path }}"
        python_virtualenv_pkgs:
          - kubernetes

    - name: Add sourcing of the Python virtual environment
      ansible.builtin.import_role:
        name: cavcrosby.general.managed_lineinfile
      vars:
        managed_lineinfile_path: "{{ ansible_user_home }}/.bashrc"
        managed_lineinfile_regexp: '^source "{{ ansible_user_python_virtualenvs_path }}/{{ ansible_user_python_virtualenv_name }}/bin/activate"'
        managed_lineinfile_line: source "{{ ansible_user_python_virtualenvs_path }}/{{ ansible_user_python_virtualenv_name }}/bin/activate"

    - name: Setup legacy iptables
      ansible.builtin.import_tasks: ./tasks/setup_legacy_iptables.yml

- name: Perform initial setup for k8s_controller (poseidon)
  hosts: k8s_controllers:&poseidon
  tags: do_initial_poseidon_k8s_controller_setup
  vars_files:
    - "{{ network_configs_path }}"
    - ./vars/{{ k8s_software_versions_file }}

  pre_tasks:
    - name: Update apt's package index
      ansible.builtin.apt:
        update_cache: true
      become: true
      when: ansible_os_family | lower == "debian"

    - name: Install controller-wide tooling (debian-like)
      ansible.builtin.apt:
        name:
          - jq  # useful when parsing output from 'kubectl get <something> --output json'
        state: present
      become: true
      when: ansible_os_family | lower == "debian"

    - name: Install containerd (debian-like)
      ansible.builtin.apt:
        name:
          - containerd={{ containerd_version }}
        state: present
      become: true
      when: ansible_os_family | lower == "debian"

    - name: Prevent containerd from being upgraded
      ansible.builtin.dpkg_selections:
        name: containerd
        selection: hold
      become: true
      when: ansible_os_family | lower == "debian"

    - name: Create the Kubernetes certificates directory
      ansible.builtin.file:
        path: "{{ k8s_cert_dir_path }}"
        recurse: true
        state: directory
      become: true

    - name: Copy the self-signed CA key into the Kubernetes certificate directory
      ansible.builtin.copy:
        dest: "{{ k8s_cert_dir_path }}/ca.key"
        src: ./rsa_keys/{{ ca_key }}
        mode: "600"
      become: true

    - name: Copy the self-signed CA certificate into the Kubernetes certificate directory
      ansible.builtin.copy:
        dest: "{{ k8s_root_cacert_path }}"
        src: ./certs/{{ ca_cert }}
        mode: "644"
      become: true

    - name: Register the self-signed CA certificate file inode
      ansible.builtin.stat:
        path: "{{ k8s_root_cacert_path }}"
      become: true
      register: k8s_root_cacert_inode

    - name: Register the modification time of the self-signed CA certificate
      ansible.builtin.set_fact:
        initial_k8s_root_cacert_mtime: "{{ k8s_root_cacert_inode.stat.mtime }}"

    - name: Configure firewall for the particular Calico deployment
      ansible.builtin.import_tasks: ./tasks/config_fw_calico.yml

    - name: Install etcdctl
      vars:
        etcd_tarball: etcd-{{ etcdctl_version }}-linux-amd64.tar.gz
        etcd_extracted_tarball_parent_path: /tmp
        etcd_download_path: "{{ etcd_extracted_tarball_parent_path }}/{{ etcd_tarball }}"
        # regex was inspired by:
        # https://stackoverflow.com/questions/61930563/extract-file-names-without-extension-ansible#answer-61931335
        strip_exts_regex: '^(.*v\d+\.\d+\.\d+[^\.]*).*'
      block:
        - name: Download the etcd tarball
          ansible.builtin.get_url:
            url: https://github.com/etcd-io/etcd/releases/download/{{ etcdctl_version }}/{{ etcd_tarball }}
            dest: "{{ etcd_download_path }}"
            checksum: sha256:4db32e3bc06dd0999e2171f76a87c1cffed8369475ec7aa7abee9023635670fb.
            mode: "755"
          become: true

        - name: Extract the etcd tarball into the desired directory
          ansible.builtin.unarchive:
            src: "{{ etcd_download_path }}"
            dest: "{{ etcd_extracted_tarball_parent_path }}"
            remote_src: true

        - name: Install etcdctl into a accessible directory in the PATH
          ansible.builtin.copy:
            dest: /usr/local/bin/etcdctl
            src: "{{ etcd_download_path | regex_replace(strip_exts_regex, '\\1') }}/etcdctl"
            mode: "755"
            remote_src: true
          become: true

  roles:
    - role: haproxy
      vars:
        haproxy_config_target_file: haproxy.cfg

    - role: keepalived
      vars:
        keepalived_config_file_template: poseidon/k8s-keepalived.conf.j2
        keepalived_config_target_file: keepalived.conf
        keepalived_health_check_script_template: poseidon/k8s-chklb.j2
        keepalived_health_check_target_script: chklb

    - role: helm
      vars:
        helm_gpg_sha256_checksum: d8d0edbdc72338073b7b126be1454c7ebd29bf0da2f64fba87b82d2ae528626d.

    - k8s_kubeadm

  handlers:
    - name: Save the current iptables rules
      community.general.iptables_state:
        path: "{{ iptables_rules_path }}"
        state: saved
      become: true

- name: Setup Kubernetes control planes (first control-planes)
  hosts: k8s_first_controllers
  tags: configure_as_k8s_first_controller
  vars_files:
    - "{{ network_configs_path }}"
    - ./vars/{{ k8s_software_versions_file }}
    - ./vars/ansible_secrets.yml
  vars:
    k8s_cert_dir_path: /etc/kubernetes/pki
    ansible_python_interpreter: "{{ ansible_user_python_virtualenvs_path }}/{{ ansible_user_python_virtualenv_name }}/bin/python"

  roles:
    - role: k8s_control_plane
      become: true

- name: Setup Kubernetes control planes (first control-planes) (poseidon)
  hosts: k8s_first_controllers:&poseidon
  tags: configure_as_poseidon_k8s_first_controller
  vars_files:
    - ./vars/{{ k8s_software_versions_file }}
    - ./vars/ansible_secrets.yml

  pre_tasks:
    - name: Setup the Calico CNI
      ansible.builtin.import_tasks: ./tasks/setup_calico.yml

- name: Setup Kubernetes control planes (high availability)
  hosts: k8s_ha_controllers
  tags: configure_as_k8s_ha_controller
  serial: 1
  vars_files:
    - "{{ network_configs_path }}"
    - ./vars/ansible_secrets.yml
  vars:
    ansible_python_interpreter: "{{ ansible_user_python_virtualenvs_path }}/{{ ansible_user_python_virtualenv_name }}/bin/python"

  roles:
    - role: k8s_control_plane
      become: true

- name: Setup Kubernetes control planes (high availability) (poseidon)
  hosts: k8s_ha_controllers:&poseidon
  tags: configure_as_poseidon_k8s_ha_controller

  tasks:
    - name: Check the modification time of the self-signed CA certificate
      ansible.builtin.stat:
        path: "{{ k8s_root_cacert_path }}"
      # Without casting the current inode's modification time to a str, it would have
      # always returned a status of changed.
      changed_when:
        - initial_k8s_root_cacert_mtime is defined
        - initial_k8s_root_cacert_mtime != (k8s_root_cacert_inode.stat.mtime | string)
      become: true
      register: k8s_root_cacert_inode
      notify:
        - Restart haproxy

  handlers:
    - name: Restart haproxy
      ansible.builtin.service:
        name: haproxy
        state: restarted
      become: true
