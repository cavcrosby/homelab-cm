---
- name: Setup WireGuard localhost
  hosts: localhost
  tags: setup_wireguard_localhost
  vars_files:
    - "{{ network_configs_path }}"
  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"

  tasks:
    - name: Calculate the WireGuard public key
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -eo pipefail
          wg pubkey < "{{ wireguard_privkey_path }}"
      changed_when: false
      register: wireguard_pubkey

    - name: Add the WireGuard connection profile files
      ansible.builtin.template:
        src: nm-settings-keyfile.j2
        dest: /etc/NetworkManager/system-connections/{{ item.filename }}
        trim_blocks: true
        lstrip_blocks: true
        owner: root
        group: root
        mode: "600"
      become: true
      notify: Reload the NetworkManager connection profile files
      loop:
        - filename: "{{ wireguard_network_interface_name }}.nmconnection"
          connection:
            id: "{{ wireguard_network_interface_name }}"
            type: wireguard
            interface-name: "{{ wireguard_network_interface_name }}"
            autoconnect: "false"
          wireguard:
            private-key:
              "{{ lookup('ansible.builtin.file', wireguard_privkey_path) }}"
            peer-routes: "false"
          wireguard-peer:
            public-key: "{{ wireguard_server_pubkey }}"
            endpoint: "{{ wireguard_endpoint }}"
            allowed-ips: "{{ vpn_network_subnet }}"
          ipv4:
            method: manual
            address1:
              "{{ (vpn_network_clients |
              community.general.json_query('[?pubkey==`' +
              wireguard_pubkey.stdout + '`]') | list)[0].address }}"
            dns:
              - "{{ vpn_preferred_nameserver }}"
            dns-search:
              - "{{ homelab_network_domain }}"

  handlers:
    - name: Reload the NetworkManager connection profile files
      ansible.builtin.command: nmcli connection reload
      changed_when: true
      become: true

- name: Create the associated network interface device's configuration files
  hosts: localhost
  tags: create_network_interface_config_files
  vars_files:
    - "{{ network_configs_path }}"
  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"

  tasks:
    - name: Create the device with information about the libvirt homelab network
      when: not enable_dhcp
      block:
        - name: Get the XML data of the homelab network
          community.libvirt.virt_net:
            name: homelab-cm
            command: get_xml
          register: homelab_network

        - name: Get the ip element of the homelab network bridge
          community.general.xml:
            xmlstring: "{{ homelab_network.get_xml }}"
            xpath: /network/ip
            content: attribute
          register: ip_element

        - name: Add the NetworkManager connection profile files
          ansible.builtin.template:
            src: nm-settings-keyfile.j2
            dest: /etc/NetworkManager/system-connections/{{ item.filename }}
            trim_blocks: true
            lstrip_blocks: true
            owner: root
            group: root
            mode: "600"
          become: true
          notify:
            - Reload the NetworkManager connection profile files
            - Reapply the NetworkManager devices
          loop:
            - filename: "{{ associated_network_interface_name }}.nmconnection"
              connection:
                id: "{{ associated_network_interface_name }}"
                type: "{{ associated_network_interface_type }}"
                interface-name: "{{ associated_network_interface_name }}"
                autoconnect: "false"
              ipv4:
                method: manual
                address1:
                  "{{ (ip_element.matches[0].ip.address + '/' +
                  ip_element.matches[0].ip.netmask) |
                  ansible.utils.ipaddr('host/prefix') }}"
                dns:
                  - "{{ homelab_preferred_nameserver }}"
                dns-search:
                  - "{{ homelab_network_domain }}"

  handlers:
    - name: Reload the NetworkManager connection profile files
      ansible.builtin.command: nmcli connection reload
      changed_when: true
      become: true

    - name: Reapply the NetworkManager devices
      ansible.builtin.command: nmcli device reapply "{{ item }}"
      changed_when: true
      become: true
      loop:
        - "{{ associated_network_interface_name }}"
