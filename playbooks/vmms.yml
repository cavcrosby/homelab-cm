---
- name: Setup QEMU/KVM
  hosts: vmms
  tags: setup_qemu_kvm
  vars_files:
    - "{{ network_configs_path }}"
  vars:
    libvirt_pool_dir_path: /var/lib/libvirt/images

  tasks:
    - name: Update apt's package index
      ansible.builtin.apt:
        update_cache: true
      become: true
      when: ansible_os_family | lower == "debian"

    - name: Install QEMU/KVM and the libvirt daemon (debian-like)
      ansible.builtin.apt:
        name:
          - libvirt-daemon-system
          - qemu-system-x86
        state: present
      become: true
      when: ansible_os_family | lower == "debian"

    - name: Set the libvirt default connect URI for all users
      ansible.builtin.template:
        src: libvirt_default_uri.j2
        # it's required that scripts have the .sh ext for /etc/profile to read it
        dest: /etc/profile.d/libvirt_default_uri.sh
        mode: "644"
      become: true

    - name: Append the ansible user to the libvirtd group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        # This group should already be created from a libvirt daemon pkg (e.g.
        # libvirt-daemon-system).
        groups: libvirt
        state: present
        append: true
      become: true

    - name: Setup the libvirt system user
      vars:
        libvirt_system_user: libvirt
        libvirt_system_user_home: /home/libvirt
      block:
        - name: Create the libvirt system user (debian-like)
          ansible.builtin.user:
            name: "{{ libvirt_system_user }}"
            state: present
            home: "{{ libvirt_system_user_home }}"
            shell: /bin/sh
            system: true
          become: true
          when: ansible_os_family | lower == "debian"

        - name: Create the libvirt system user's .ssh directory
          ansible.builtin.file:
            path: "{{ libvirt_system_user_home }}/.ssh"
            owner: "{{ libvirt_system_user }}"
            group: "{{ libvirt_system_user }}"
            state: directory
            mode: "700"
          become: true

        - name: Create the authorized_keys file to enable SSH access as the libvirt system user
          ansible.builtin.copy:
            dest: "{{ libvirt_system_user_home }}/.ssh/authorized_keys"
            owner: "{{ libvirt_system_user }}"
            group: "{{ libvirt_system_user }}"
            mode: "600"
            content: |
              {{ lookup('ansible.builtin.file', './ssh_keys/id_rsa_ron.pub') }}
              {{ lookup('ansible.builtin.file', './ssh_keys/id_rsa_roxanne.pub') }}
          become: true

    - name: Install libvirt-python dependencies (debian-like)
      ansible.builtin.apt:
        name:
          - gcc
          - libvirt-dev
          - python3-dev
        state: present
      become: true
      when: ansible_os_family | lower == "debian"

    - name: Setup the Python virtual environment
      ansible.builtin.include_role:
        name: python_virtualenv
      vars:
        python_virtualenv_name: "{{ ansible_user_python_virtualenv_name }}"
        python_virtualenvs_path: "{{ ansible_user_python_virtualenvs_path }}"
        python_virtualenv_pkgs:
          - libvirt-python
          - lxml

    - name: Add sourcing of the Python virtual environment
      ansible.builtin.import_role:
        name: cavcrosby.general.managed_lineinfile
      vars:
        managed_lineinfile_path: "{{ ansible_user_home }}/.bashrc"
        managed_lineinfile_regexp: '^source "{{ ansible_user_python_virtualenvs_path }}/{{ ansible_user_python_virtualenv_name }}/bin/activate"'
        managed_lineinfile_line: source "{{ ansible_user_python_virtualenvs_path }}/{{ ansible_user_python_virtualenv_name }}/bin/activate"

    - name: Setup libvirt networking
      vars:
        ansible_python_interpreter: "{{ ansible_user_python_virtualenvs_path }}/{{ ansible_user_python_virtualenv_name }}/bin/python"
      block:
        - name: Define the homelab network
          community.libvirt.virt_net:
            name: homelab-cm
            command: define
            xml: "{{ lookup('ansible.builtin.template', 'homelab-libvirt-network.xml.j2') }}"

        - name: Have the homelab network start up on boot
          community.libvirt.virt_net:
            name: homelab-cm
            autostart: true

        - name: Start the homelab network
          community.libvirt.virt_net:
            name: homelab-cm
            state: active

        - name: Define the poseidon homelab network
          community.libvirt.virt_net:
            name: poseidon-k8s-homelab-cm
            command: define
            xml: "{{ lookup('ansible.builtin.template', libvirt_poseidon_k8s_network_config_file_template) }}"

        - name: Add a static entry into the poseidon homelab network
          community.libvirt.virt_net:
            name: poseidon-k8s-homelab-cm
            command: modify
            xml: <host mac='{{ item.poseidon_k8s_mac_addr }}' name='{{ item.name }}' ip='{{ item.poseidon_k8s_ipv4_addr }}'/>
          loop: "{{ libvirt_poseidon_k8s_controller_domain_configs + libvirt_poseidon_k8s_worker_domain_configs }}"

        - name: Have the poseidon homelab network start up on boot
          community.libvirt.virt_net:
            name: poseidon-k8s-homelab-cm
            autostart: true

        - name: Start the poseidon homelab network
          community.libvirt.virt_net:
            name: poseidon-k8s-homelab-cm
            state: active

    - name: Copy over the poseidon Kubernetes controller node QEMU backing image
      ansible.builtin.copy:
        dest: "{{ libvirt_pool_dir_path }}"
        src: ./packer/qemu-poseidon_k8s_controller/poseidon_k8s_controller.qcow2
        mode: "600"
      become: true

    - name: Copy over the poseidon Kubernetes worker node QEMU backing image
      ansible.builtin.copy:
        dest: "{{ libvirt_pool_dir_path }}"
        src: ./packer/qemu-poseidon_k8s_worker/poseidon_k8s_worker.qcow2
        mode: "600"
      become: true

    - name: Setup libvirt domains
      vars:
        ansible_python_interpreter: "{{ ansible_user_python_virtualenvs_path }}/{{ ansible_user_python_virtualenv_name }}/bin/python"
      block:
        - name: Create the poseidon Kubernetes controller nodes' disk
          ansible.builtin.include_role:
            name: qemu_img
          vars:
            disk_dest_dir_path: "{{ libvirt_pool_dir_path }}"
            backing_file_path: "{{ libvirt_pool_dir_path }}/poseidon_k8s_controller.qcow2"
            disk_prefix: "{{ item.name }}"
          loop: "{{ libvirt_poseidon_k8s_controller_domain_configs }}"

        - name: Define the poseidon Kubernetes controller nodes' domain
          community.libvirt.virt:
            command: define
            xml: "{{ lookup('ansible.builtin.template', libvirt_poseidon_k8s_controller_domain_template) }}"
            autostart: "{{ libvirt_poseidon_k8s_node_domain_autostart }}"
          vars:
            domain_name: "{{ item.name }}"
            domain_homelab_mac_addr: "{{ item.homelab_mac_addr }}"
            domain_poseidon_k8s_mac_addr: "{{ item.poseidon_k8s_mac_addr }}"
          loop: "{{ libvirt_poseidon_k8s_controller_domain_configs }}"

        - name: Create the poseidon Kubernetes worker nodes' disk
          ansible.builtin.include_role:
            name: qemu_img
          vars:
            disk_dest_dir_path: "{{ libvirt_pool_dir_path }}"
            backing_file_path: "{{ libvirt_pool_dir_path }}/poseidon_k8s_worker.qcow2"
            disk_prefix: "{{ item.name }}"
          loop: "{{ libvirt_poseidon_k8s_worker_domain_configs }}"

        - name: Define the poseidon Kubernetes worker nodes' domain
          community.libvirt.virt:
            command: define
            xml: "{{ lookup('ansible.builtin.template', libvirt_poseidon_k8s_worker_domain_template) }}"
            autostart: "{{ libvirt_poseidon_k8s_node_domain_autostart }}"
          vars:
            domain_name: "{{ item.name }}"
            domain_homelab_mac_addr: "{{ item.homelab_mac_addr }}"
            domain_poseidon_k8s_mac_addr: "{{ item.poseidon_k8s_mac_addr }}"
          loop: "{{ libvirt_poseidon_k8s_worker_domain_configs }}"
