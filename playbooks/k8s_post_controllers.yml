---
- name: Install application manifests (poseidon)
  hosts: k8s_first_controllers:&poseidon
  tags: install_poseidon_k8s_app_manifests
  vars_files:
    - "{{ network_configs_path }}"
    - ./vars/ansible_secrets.yml
  vars:
    ansible_python_interpreter: "{{ ansible_user_python_virtualenvs_path }}/{{ ansible_user_python_virtualenv_name }}/bin/python"

  roles:
    - role: k8s_jenkins
      vars:
        cluster_domain: "{{ homelab_poseidon_k8s_network_domain }}"
        jenkins_instance_name: jenkins-torkel
        jenkins_instance_image: cavcrosby/jenkins-torkel:latest
        jenkins_manifest_template: k8s-jenkins-torkel.yml.j2
        jenkins_k8s_service_account: jenkins
        jenkins_http_port: 8080
        jenkins_agent_port: 50000
        dockerhub_creds_secret_name: dockerhub-creds

- name: Install Helm charts (poseidon)
  hosts: k8s_first_controllers:&poseidon
  tags: install_poseidon_k8s_helm_charts
  vars_files:
    - ./vars/{{ k8s_software_versions_file }}
    - ./vars/ansible_secrets.yml
  vars:
    ansible_python_interpreter: "{{ ansible_user_python_virtualenvs_path }}/{{ ansible_user_python_virtualenv_name }}/bin/python"

  tasks:
    - name: Install Ingress NGINX controller
      vars:
        ingress_nginx_namespace: ingress-nginx
        dockerhub_creds_secret_name: dockerhub-creds
      block:
        - name: Create the Ingress NGINX namespace
          kubernetes.core.k8s:
            api_version: v1
            kind: Namespace
            name: "{{ ingress_nginx_namespace }}"
            state: present
          become: true
          environment:
            KUBECONFIG: /etc/kubernetes/admin.conf

        - name: Apply the Ingress NGINX Kubernetes manifest to the cluster
          kubernetes.core.k8s:
            template: "{{ ingress_nginx_manifest_template }}"
            state: present
          become: true
          environment:
            KUBECONFIG: /etc/kubernetes/admin.conf

        - name: Add the Ingress NGINX Helm repo
          kubernetes.core.helm_repository:
            repo_name: ingress-nginx
            repo_url: https://kubernetes.github.io/ingress-nginx
          become: true

        - name: Deploy the Ingress NGINX Helm chart inside the ingress-nginx namespace
          kubernetes.core.helm:
            release_name: ingress-nginx
            chart_ref: ingress-nginx/ingress-nginx
            chart_version: "{{ ingress_nginx_chart_version }}"
            release_namespace: "{{ ingress_nginx_namespace }}"
            create_namespace: true
            release_state: present
            values: "{{ lookup('ansible.builtin.template', ingress_nginx_helm_values_file_template) | from_yaml }}"
          become: true
          environment:
            KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Setup the Metrics Server
      vars:
        sign_kubelet_csrs_target_script: sign_kubelet_csrs
        sign_kubelet_csrs_script_path: /usr/local/bin/{{ sign_kubelet_csrs_target_script }}
      block:
        - name: Copy the sign_kubelet_csrs utility to the controller
          ansible.builtin.copy:
            dest: "{{ sign_kubelet_csrs_script_path }}"
            src: ./scripts/{{ sign_kubelet_csrs_target_script }}
            mode: "744"
          become: true

        - name: Approves CSRs that are pending from nodes' kubelets
          ansible.builtin.command: "{{ sign_kubelet_csrs_script_path }}"
          changed_when: approve_csrs_script.stdout != ""
          failed_when: approve_csrs_script.stderr != ""
          become: true
          register: approve_csrs_script

        - name: Add the Metrics Server Helm repo
          kubernetes.core.helm_repository:
            repo_name: metrics-server
            repo_url: https://kubernetes-sigs.github.io/metrics-server/
          become: true

        - name: Deploy the Metrics Server Helm chart inside the metrics-server namespace
          kubernetes.core.helm:
            release_name: metrics-server
            chart_ref: metrics-server/metrics-server
            chart_version: "{{ metrics_server_chart_version }}"
            release_namespace: kube-system
            release_state: present
            values:
              resources:
                requests:
                  cpu: 100m
                  memory: 200Mi
          become: true
          environment:
            KUBECONFIG: /etc/kubernetes/admin.conf
