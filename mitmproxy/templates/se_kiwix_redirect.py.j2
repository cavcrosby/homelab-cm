# {{ ansible_managed }}
"""An addon that redirects Stack Exchange (se) requests to kiwix-serve."""

from __future__ import annotations

import logging
import re
from http import HTTPMethod, HTTPStatus
from pathlib import Path
from typing import TYPE_CHECKING
from xml.etree import ElementTree

import requests
import tomllib

from mitmproxy.http import Response

if TYPE_CHECKING:
    from mitmproxy.http import HTTPFlow

logger = logging.getLogger(__name__)


def request(flow: HTTPFlow) -> None:
    """Intercept the client's HTTP request."""
    with open(Path(f"{Path(__file__).parent}/addons.toml"), "rb") as file:
        configs = tomllib.load(file)

    logger.info(f"flow.request.host_header: {flow.request.host_header}")
    match = re.search(r"^/questions/\d+/.+$", flow.request.path)
    if (
        flow.request.host_header in configs.get("se_domains", ())
        and match
        and flow.request.method == HTTPMethod.GET
    ):
        NAMESPACES = {"": "http://www.w3.org/2005/Atom"}
        res = requests.get(
            f"{configs.get('http_kiwix_host')}/catalog/v2/entries",
            params={"name": f"{flow.request.host_header}_en_all"},
        ).text

        host = re.sub(r"^https?://", "", configs.get("http_kiwix_host", ""))
        logger.info(f"{host} entries response: {res}")
        entry = ElementTree.fromstring(res).find("entry", NAMESPACES)
        if entry:
            for link in entry.iterfind("link", NAMESPACES):
                if link.get("type") == "text/html":
                    url = "{http_kiwix_host}{zim}{question}".format(
                        http_kiwix_host=configs.get("http_kiwix_host"),
                        zim=link.get("href"),
                        question=match.group(),
                    )
                    logger.info(f"{host} question url: {url}")

                    if requests.get(url).ok:
                        flow.response = Response.make(
                            HTTPStatus.TEMPORARY_REDIRECT,
                            headers={"Location": url},
                        )
