---
- name: Update Container Servers
  hosts: ctrservers

  tasks:
  - name: Create base Downloads directory
    ansible.builtin.file:
      path: "{{ ansible_env['HOME'] }}/Downloads"
      state: directory
      mode: '700'

  # TODO(cavcrosby): currently this setup will have packages be installed in 
  # conjunction with the system's python packages. Not a good idea, will need to
  # look into implementing a virtual environment for ansible. 
  - name: Install base dependencies
    ansible.builtin.apt:
      pkg:
      - python3-pip
      state: present
      update_cache: yes
    become: yes

  - name: Install base python packages
    pip:
      name: netaddr

  - name: Install Docker dependencies
    ansible.builtin.apt:
      pkg:
      - ca-certificates
      - curl
      - gnupg
      - curl
      state: present
      update_cache: yes
    become: yes

  - name: Install debootstrap dependencies
    ansible.builtin.apt:
      pkg:
      - debootstrap
      - debian-archive-keyring
      state: present
      update_cache: yes
    become: yes

  - name: Install systemd-container dependencies
    ansible.builtin.apt:
      pkg:
      - systemd-container
      - bridge-utils
      state: present
      update_cache: yes
    become: yes

  - name: Remove Docker's Installed GPG key, If Exists
    ansible.builtin.file:
      path: "{{ docker_keyring_install_path }}"
      state: absent
    become: yes

  - name: Grab Docker's Official GPG key
    ansible.builtin.uri:
      url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
      method: GET
      follow_redirects: safe
      dest: "{{ docker_keyring_download_path }}"
      # 304 redirect is ok
      status_code: [200, 304]

  # --batch option is needed for gpg due to odd "gpg: cannot open '/dev/tty'" error.
  # For reference:
  # https://github.com/pipech/erpnext-docker-debian/issues/26
  - name: Install Docker's GPG key
    ansible.builtin.shell: |
      gpg --batch --output {{ docker_keyring_install_path }} --dearmor {{ docker_keyring_download_path }}
    become: yes

  - name: Add Docker's stable apt repository (x86_64)
    ansible.builtin.apt_repository:
      repo: >
        deb [arch=amd64 signed-by={{ docker_keyring_install_path }}]
        https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable
      state: present
    become: yes
    when: ansible_architecture == "x86_64"

  - name: Install the Docker Engine
    ansible.builtin.apt:
      pkg:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      state: present
      update_cache: yes
    become: yes

- name: Setup systemd-networkd networking
  hosts: ctrservers
  become: true

  tasks:
    - name: Add systemd network files
      ansible.builtin.template:
        src: systemd.network.j2
        dest: /etc/systemd/network/{{ ansible_hostname }}-{{ item.filename }}
        owner: root
        group: root
        mode: '644'
        force: yes
      loop:
        # Everything under 'filename' will be recorded in the systemd network files template.
        # Each section header is determined by the top level key in each hash.
        - filename: "{{ ansible_default_ipv4.interface }}.link"
          Match:
            MACAddress: "{{ ansible_default_ipv4.macaddress }}"
          Link:
            NamePolicy: keep
        - filename: "{{ ansible_default_ipv4.interface }}.network"
          Match:
            Name: "{{ ansible_default_ipv4.interface }}"
          Network:
            Bridge: "br0"
        - filename: 'br0.netdev'
          NetDev:
            Name: br0
            Kind: bridge
        - filename: 'br0.network'
          Match:
            Name: "br0"
          Network:
            DNS: "{{ ansible_default_ipv4.gateway }}"
            Address: "{{ (ansible_default_ipv4.address + '/' + subnet_prefix) }}"
            Gateway: "{{ ansible_default_ipv4.gateway }}"
      vars:
        subnet_prefix: "{{ (ansible_default_ipv4.address + '/' + ansible_default_ipv4.netmask) | ansible.netcommon.ipaddr('prefix') }}"
      notify:
        - Start and enable systemd-networkd
        - Remove Debian's networking daemon interfaces file
        - Stop and disable Debian networking daemon
        - Restart systemd-networkd

  handlers:
  - name: Start and enable systemd-networkd
    ansible.builtin.systemd:
      name: systemd-networkd
      enabled: yes
      state: started

  - name: Remove Debian's networking daemon interfaces file
    ansible.builtin.file:
      path: "/etc/network/interfaces"
      state: absent
    when: ansible_distribution == "Debian"

  - name: Stop and disable Debian networking daemon
    ansible.builtin.systemd:
      name: networking
      enabled: no
      state: stopped
    when: ansible_distribution == "Debian"

  - name: Restart systemd-networkd
    ansible.builtin.systemd:
      name: systemd-networkd
      enabled: yes
      state: restarted

# - name: Customize <insert machine type> Nodes
#
# DISCUSS(cavcrosby): implement this play, essentially here is where each systemd
# container will be created and along with its appropriate .nspawn file.
  