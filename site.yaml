---
- name: Update Container Servers
  hosts: ctrservers

  roles:
    - lxd-source

  tasks:
    - name: Create {{ ansible_user_id }}'s Downloads directory
      ansible.builtin.file:
        path: "{{ ansible_env['HOME'] }}/Downloads"
        state: directory
        mode: "700"

    - name: Install python dependencies
      ansible.builtin.apt:
        pkg:
        - python3-venv
        state: present
        update_cache: yes
      become: yes

    - name: Create python-virtual environments directory
      ansible.builtin.file:
        path: "{{ ansible_python_virtualenvs_path }}"
        state: directory
        mode: "755"

    - name: Add sourcing the {{ ansible_python_virtualenv }} python virtualenv
      ansible.builtin.import_role:
        name: common
        tasks_from: lbyl_lineinfile
      vars:
        path: "{{ ansible_env['HOME'] }}/.bashrc"
        regexp: '^source "{{ ansible_python_virtualenvs_path }}/{{ ansible_python_virtualenv }}/bin/activate"'
        line: "source \"{{ ansible_python_virtualenvs_path }}/{{ ansible_python_virtualenv }}/bin/activate\""
        line_identifier: "sourcing the {{ ansible_python_virtualenv }} python virtualenv"

    - name: Install base python packages
      ansible.builtin.pip:
        name: netaddr
        virtualenv: "{{ ansible_python_virtualenvs_path }}/{{ ansible_python_virtualenv }}"
        virtualenv_command: /usr/bin/python3 -m venv "{{ ansible_python_virtualenvs_path }}/{{ ansible_python_virtualenv }}"

    - name: Install Docker dependencies
      ansible.builtin.apt:
        pkg:
        - ca-certificates
        - curl
        - gnupg
        - curl
        state: present
        update_cache: yes
      become: yes

    - name: Grab Docker's Official GPG key
      ansible.builtin.uri:
        url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
        method: GET
        follow_redirects: safe
        dest: "{{ docker_keyring_download_path }}"
        # 304 redirect is ok
        status_code: [200, 304]
      notify:
        - Remove Docker's Installed GPG key, If Exists
        - Install Docker's GPG key

    - name: Flush handlers
      meta: flush_handlers

    - name: Add Docker's stable apt repository (x86_64)
      ansible.builtin.apt_repository:
        repo: >
          deb [arch=amd64 signed-by={{ docker_keyring_install_path }}]
          https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable
        state: present
      become: yes
      when: ansible_architecture == "x86_64"

    - name: Install the Docker Engine
      ansible.builtin.apt:
        pkg:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        state: present
        update_cache: yes
      become: yes

  handlers:
    - name: Remove Docker's Installed GPG key, If Exists
      ansible.builtin.file:
        path: "{{ docker_keyring_install_path }}"
        state: absent
      become: yes

    # --batch option is needed for gpg due to odd "gpg: cannot open '/dev/tty'" error.
    # For reference:
    # https://github.com/pipech/erpnext-docker-debian/issues/26
    - name: Install Docker's GPG key
      ansible.builtin.shell: |
        gpg --batch --output {{ docker_keyring_install_path }} --dearmor {{ docker_keyring_download_path }}
      become: yes

- name: Setup systemd-networkd networking
  hosts: ctrservers
  become: true

  tasks:
    - name: Add systemd network files
      ansible.builtin.template:
        src: systemd.network.j2
        dest: /etc/systemd/network/{{ ansible_hostname }}-{{ item.filename }}
        owner: root
        group: root
        mode: "644"
        force: no
      loop:
        # Everything under 'filename' will be recorded in the systemd network files template.
        # Each section header is determined by the top level key in each hash.
        - filename: "{{ ansible_default_ipv4.interface }}.link"
          Match:
            MACAddress: "{{ ansible_default_ipv4.macaddress }}"
          Link:
            NamePolicy: keep

        - filename: "{{ ansible_default_ipv4.interface }}.network"
          Match:
            Name: "{{ ansible_default_ipv4.interface }}"
          Network:
            DHCP: "ipv4"
      vars:
        subnet_prefix: "{{ (ansible_default_ipv4.address + '/' + ansible_default_ipv4.netmask) | ansible.netcommon.ipaddr('prefix') }}"
      notify:
        - Start and enable systemd-networkd
        - Remove Debian's networking daemon interfaces file
        - Stop and disable Debian networking daemon
        - Restart systemd-networkd

  handlers:
    - name: Start and enable systemd-networkd
      ansible.builtin.systemd:
        name: systemd-networkd
        enabled: yes
        state: started

    - name: Remove Debian's networking daemon interfaces file
      ansible.builtin.file:
        path: /etc/network/interfaces
        state: absent
      when: ansible_distribution == "Debian"

    - name: Stop and disable Debian networking daemon
      ansible.builtin.systemd:
        name: networking
        enabled: no
        state: stopped
      when: ansible_distribution == "Debian"

    - name: Restart systemd-networkd
      ansible.builtin.systemd:
        name: systemd-networkd
        enabled: yes
        state: restarted

- name: Create LXD container nodes on ctrservers
  hosts: ctrservers
  # Added as add_host only runs on one host out of all the hosts in a play.
  # For reference: 
  # https://stackoverflow.com/questions/42106527/ansible-how-to-call-module-add-host-for-all-hosts-of-the-play
  serial: 1
  vars_files:
    - vars/lxd-containers.yaml

  tasks:
    # - name: Debug
    #   ansible.builtin.debug:
    #     var: result

    - name: Create LXD containers
      community.general.lxd_container:
        name: "{{ item.name }}"
        state: started
        profiles: ["default"]
        ignore_volatile_options: false
        wait_for_ipv4_addresses: true
        source:
          type: image
          mode: pull
          alias: "{{ item.image }}"
          protocol: simplestreams
          server: https://images.linuxcontainers.org
      loop: "{{ lxd_containers }}"
    
    - name: Register LXD containers as inventory
      ansible.builtin.add_host:
        # The 'name' attribute makes Ansible happy, trying to combine
        # name/ansible_lxd_host into 'ansible_host' did not appear to work. For reference:
        # https://docs.ansible.com/ansible/latest/collections/community/general/lxd_connection.html
        #
        # Also inspired by:
        # https://www.reddit.com/r/ansible/comments/9b03l8/managing_lxd_containers_on_remote_machines/
        name: "{{ item.name }}"
        ansible_lxd_host: "{{ item.name }}"
        ansible_lxd_remote: "{{ ansible_default_ipv4.address }}"
        ansible_connection: lxd
        groups: [lxd_containers]
      loop: "{{ lxd_containers }}"

- name: Check/install python on LXD container nodes
  hosts: lxd_containers
  # Ansible seems to fail at gathering facts from a container if the provided image
  # does not have Python installed.
  gather_facts: no

  tasks:
    - name: Check if python3 is installed in container
      ansible.builtin.raw: dpkg -s python3
      register: python_install_check
      failed_when: python_install_check.rc not in [0, 1]
      changed_when: false
    
    - name: Install python3 in container
      ansible.builtin.raw: apt-get install --assume-yes python3
      when: python_install_check.rc == 1

- name: Perform initial configuration on LXD container nodes
  hosts: lxd_containers

  tasks:
    - name: Check if python3 is installed in container
      ansible.builtin.raw: dpkg -s python3
      register: python_install_check
      failed_when: python_install_check.rc not in [0, 1]
      changed_when: false
