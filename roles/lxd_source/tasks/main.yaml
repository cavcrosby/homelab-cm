---
- name: Update apt's package index
  ansible.builtin.apt:
    update_cache: yes
  become: yes

- name: Create lxc_source's data directory
  ansible.builtin.file:
    path: "{{ _lxd_data_dir }}"
    state: directory
    mode: "700"
  become: yes
  register: creating_lxd_source_dir_check
  changed_when: creating_lxd_source_dir_check.state == "absent"

- name: Create GOPATH's bin directory
  ansible.builtin.file:
    path: "{{ lxd_go_path }}/bin"
    state: directory
    mode: "775"
  become: yes

- name: Append PATH with GOPATH/bin for the ansible user
  ansible.builtin.import_role:
    name: common
    tasks_from: managed_lineinfile
  vars:
    path: "{{ ansible_env['HOME'] }}/.bashrc"
    regexp: '^export PATH="(.+:|)?{{ lxd_go_path }}/bin(:.+|)"'
    line: 'export PATH="${PATH}:{{ lxd_go_path }}/bin"'
    line_identifier: PATH that includes with GOPATH/bin

# This list is specific to Debian 11 at the moment. Can be expanded to a vars
# directory to install dependencies based on the distro.
- name: Install the LXD dependencies
  ansible.builtin.apt:
    name:
      - acl
      - attr
      - autoconf
      - dnsmasq-base
      - git
      - golang
      - libacl1-dev
      - libcap-dev
      - liblxc1
      # liblxc-dev would be lxc-dev in Debian repos
      - lxc-dev
      - libsqlite3-dev
      - libtool
      - libudev-dev
      - liblz4-dev
      - libuv1-dev
      - make
      - pkg-config
      - rsync
      - squashfs-tools
      - tar
      - tcl
      - xz-utils
      - ebtables
    state: present
  become: yes

- name: Set USE_LXC_BRIDGE to false
  ansible.builtin.import_role:
    name: common
    tasks_from: managed_lineinfile
  become: yes
  vars:
    path: /etc/default/lxc-net
    regexp: '^USE_LXC_BRIDGE=.+'
    line: 'USE_LXC_BRIDGE="false"'
    line_identifier: USE_LXC_BRIDGE set to false

- name: Register the LXC bridge file inode
  ansible.builtin.stat:
    path: /sys/class/net/{{ _default_lxc_bridge }}
  become: yes
  register: default_lxc_bridge_inode

- name: Remove default LXC bridge
  ansible.builtin.shell: |
    ip link set {{ _default_lxc_bridge }} down
    ip link delete {{ _default_lxc_bridge }} type bridge
  become: yes
  when: default_lxc_bridge_inode.stat.exists

# When installing a new version of LXD, the wrapper must be used to get the
# current LXD's LD_LIBRARY_PATH.
- name: Get the running LXD version
  ansible.builtin.shell: lxd --version
  become: yes
  register: running_lxd_version
  failed_when: "'error while loading shared libraries:' in running_lxd_version.stderr"
  changed_when: false

- name: Check if LXD is installed
  ansible.builtin.shell: |
    find "{{ lxd_go_path }}/bin" \( -name 'lxd' \) \
      -and \( -type f \)
  become: yes
  register: lxd_check
  changed_when: lxd_check.stdout | length == 0
                or running_lxd_version.stdout != lxd_release_version 
  notify:
    - Grab a LXD release tarball, and extract the archive
    - Build the LXD libraries
    - Build LXD

- name: Flush the LXD installation handlers
  ansible.builtin.meta: flush_handlers

- name: Update secure path to add {{ lxd_go_path }}
  ansible.builtin.copy:
    dest: /etc/sudoers.d/ansible-lxd-source
    content: |
      # ANSIBLE MANAGED
      Defaults  secure_path=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:{{ lxd_go_path }}/bin
    mode: "440"
  become: yes

- name: Create wrapper for LXD
  ansible.builtin.copy:
    dest: "{{ lxd_wrapper_path }}"
    mode: "755"
    content: |
      #!/bin/sh
      #
      # ANSIBLE MANAGED

      set -e

      # constants
      PROGRAM_NAME="$(basename "$0")"
      readonly PROGRAM_NAME
      readonly ROOT_UID=0
      readonly LD_LIBRARY_PATH="{{ _lxd_ld_library_path }}"
      export LD_LIBRARY_PATH

      if [ "$(id --user)" != "${ROOT_UID}" ]; then
          echo "${PROGRAM_NAME}: wrapper must be ran as root!" >&2
          exit 1
      fi

      {{ lxd_go_path }}/bin/lxd "$@"
  become: yes

- name: Create subuid && subgid files
  ansible.builtin.copy:
    dest: "{{ item }}"
    mode: "644"
    content: |
      # ANSIBLE MANAGED
      root:100000:65536
      {{ ansible_user_id }}:100000:65536
  become: yes
  loop:
    - /etc/subuid
    - /etc/subgid

- name: Create the '{{ lxd_access_group }}' group
  ansible.builtin.group:
    name: "{{ lxd_access_group }}"
    state: present
  become: yes

- name: Add {{ ansible_user_id }} to '{{ lxd_access_group }}' group
  ansible.builtin.user:
    append: yes
    groups: "{{ lxd_access_group }}"
    name: "{{ ansible_user_id }}"
  become: yes

# MONITOR(cavcrosby): ideally this should only run when the ansible user is added
# to the group that is allowed to interact with LXD. That said, running this
# meta module inside of handler appears to not be possible at the moment? A few
# related GitHub issues are closed and are made part of ansible-core 2.11 or
# higher that "should" resolve this but I am not having such luck. For reference:
# https://github.com/ansible/ansible/issues/66414
# https://github.com/ansible/ansible/issues/50306
# https://docs.rackspace.com/blog/speeding-up-ssh-session-creation/
#
# When part of a handler as is, I get an error stating that the 'Shared connection to <client machine> closed'.
# When adding async/poll (async: 1, poll: 0), while the task now does not fail,
# the underlying connection does not seem to change (e.g. foo user is still not
# part of the group bar). This will need to be watched incase things change.
- name: Reset ssh connection
  ansible.builtin.meta: reset_connection
  changed_when: false

- name: Create a LXD service file
  ansible.builtin.copy:
    dest: /etc/systemd/system/lxd.service
    mode: "644"
    content: |
      [Unit]
      Description=Linux Container Daemon

      [Service]
      Type=exec
      ExecStart={{ lxd_wrapper_path }} --group {{ lxd_access_group }}
      ExecStop={{ lxd_wrapper_path }} shutdown

      [Install]
      WantedBy=multi-user.target
  become: yes
  notify:
    - Save the current iptables rules

- name: Enable the LXD service
  ansible.builtin.systemd:
    name: lxd
    enabled: yes
    state: started
    daemon_reload: yes
  become: yes

# MONITOR(cavcrosby): it was found that the LXD unix socket file would sometimes
# not exist by the time certain tasks were ran, causing them to fail/behave
# inappropriately. Time will tell if this task fixes the issue.
- name: Wait until the LXD socket is present before continuing
  wait_for:
    path: /var/lib/lxd/unix.socket
    timeout: 10

- name: Create the LXD preseed
  ansible.builtin.copy:
    dest: "{{ _lxd_remote_preseed_path }}"
    mode: "644"
    content: "{{ lxd_preseed }}"
  become: yes
  register: create_lxd_preseed_check
  changed_when: create_lxd_preseed_check.state == "absent"

- name: Get the LXD's preseed file inode
  ansible.builtin.stat:
    path: "{{ _lxd_remote_preseed_path }}"
  become: yes
  register: lxd_preseed_inode

# For reference on the shell command (it was either this, truncate, or dd):
# https://unix.stackexchange.com/questions/254644/how-do-i-remove-the-newline-from-the-last-line-in-a-file-in-order-to-add-text-to
# This was done as it doesn't seem possible to interject a final newline in the
# preseed variable.
- name: Create the running LXD's preseed
  ansible.builtin.shell: |
    lxd init --dump | perl -pi -e 'chomp if eof' > "{{ _running_lxd_remote_preseed_path }}"
  become: yes
  register: create_running_lxd_preseed_check
  changed_when: create_running_lxd_preseed_check.rc != 0

- name: Get the running LXD's preseed file inode
  ansible.builtin.stat:
    path: "{{ _running_lxd_remote_preseed_path }}"
  become: yes
  register: running_lxd_preseed_inode

# LXD can be initialize 'n' number of times, meaning there is currently no
# absolute way to determine if LXD has been initialize. For reference:
# https://discuss.linuxcontainers.org/t/how-to-check-if-lxd-init-auto-already-ran/1635
- name: Initialize LXD
  ansible.builtin.shell: |
    lxd init --preseed < "{{ _lxd_remote_preseed_path }}"
  become: yes
  changed_when:
    - lxd_preseed_inode.stat.checksum != running_lxd_preseed_inode.stat.checksum

- name: Set the trust password for LXD
  ansible.builtin.shell: |
    lxc config set core.trust_password '{{ lxd_trust_password }}'
  become: yes
  register: set_trust_password_check
  no_log: true
  changed_when: set_trust_password_check.rc != 0

- name: Set LXD remote on this controller node
  delegate_to: 127.0.0.1
  ansible.builtin.shell: |
    lxc remote add --accept-certificate --password='{{ lxd_trust_password }}' {{ ansible_default_ipv4.address }}
  # It was observed that while ansible will say that each server was added (e.g.
  # each command returns a exit status of 0, in parallel). Turns out that
  # occasionally only one (out of N) remote would be added. I speculate this
  # is because ${HOME}/.config/lxc/config.yml gets blocked to be written by one
  # of the processes adding a remote. Thus this task should be ran sequentially.
  throttle: 1
  register: lxc_remote_add_check
  failed_when:
    - lxc_remote_add_check.rc != 0
    # 'Error: Remote x.x.x.x exists as <https://x.x.x.x:8443>'
    - "'exists' not in lxc_remote_add_check.stderr"
  no_log: true
  changed_when: lxc_remote_add_check.rc == 0
