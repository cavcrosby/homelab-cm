---
- name: Update apt's package index
  ansible.builtin.apt:
    update_cache: true
  become: true
  become_user: root

# This file task may create a file in a location that does not actually require
# privilege escalation. However, there exist a situation where if the remote_user
# is a privileged user and this task is forced to run as a unprivileged user, then
# the following error would occur: "Failed to change ownership of the temporary
# files Ansible needs to create despite connecting as a privileged user".
- name: Create altaria's data directory
  ansible.builtin.file:
    path: "{{ _altaria_data_dir }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: directory
    mode: "700"
  become: true
  become_user: root

# This list is specific to Ubuntu/Debian at the moment. Can be expanded to a vars
# directory to install dependencies based on the distro.
- name: Install pyenv dependencies
  ansible.builtin.apt:
    name:
      - build-essential
      - curl
      - git
      - libbz2-dev
      - libffi-dev
      - liblzma-dev
      - libncurses5-dev
      - libncursesw5-dev
      - libreadline-dev
      - libsqlite3-dev
      - libssl-dev
      - llvm
      - make
      - python3-openssl
      - tk-dev
      - wget
      - xz-utils
      - zlib1g-dev
    state: present
  become: true
  become_user: root

- name: Install general-purpose-scripts dependencies
  ansible.builtin.apt:
    name:
      - jq
    state: present
  become: true
  become_user: root

# Assumes /usr/local/bin comes before /usr/bin in the shell's default PATH (e.g.
# the one "hardcoded" into the shell binary).
- name: Create system make wrapper
  ansible.builtin.copy:
    dest: /usr/local/bin/make
    mode: "755"
    content: |
      #!/bin/sh
      #
      # ANSIBLE MANAGED

      set -e

      . "/etc/profile.d/cavcrosby-makefiles"

      # constants
      export GPS_CONFIG_FILE_PATH="{{ gps_config_file_path }}"
      export PYENV_ROOT="{{ _jenkins_pyenv_root_path }}"
      PATH="${PYENV_ROOT}/plugins/pyenv-virtualenv/shims:${PYENV_ROOT}/shims:${PYENV_ROOT}/bin:${PATH}"
      export PATH

      /usr/bin/make --include-dir "${CAVCROSBY_MAKEFILES_PATH}" "$@"
  become: true
  become_user: root

# This list is specific to Debian at the moment. Can be expanded to a vars
# directory to install dependencies based on the distro.
#
# For reference on list of dependencies:
# https://packagecloud.io/cavcrosby/makefiles/install#manual
- name: Install cavcrosby-makefiles dependencies
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - curl
      - debian-archive-keyring
      - gnupg
    state: present
  become: true
  become_user: root

- name: Grab cavcrosby-makefiles's official GPG key
  ansible.builtin.get_url:
    url: https://packagecloud.io/cavcrosby/makefiles/gpgkey
    dest: "{{ cavcrosby_makefiles_keyring_download_path }}"
  notify:
    - Remove cavcrosby-makefiles's installed GPG key
    - Install cavcrosby-makefiles's GPG key

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Add cavcrosby-makefiles's main apt repository
  ansible.builtin.apt_repository:
    repo: >
      deb [arch=amd64 signed-by={{ cavcrosby_makefiles_keyring_install_path }}]
      https://packagecloud.io/cavcrosby/makefiles/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} main
    state: present
  become: true
  become_user: root

- name: Install cavcrosby-makefiles
  ansible.builtin.apt:
    name:
      - cavcrosby-makefiles
    state: present
  become: true
  become_user: root

- name: Create root's .profile
  ansible.builtin.copy:
    dest: "{{ _roots_home }}/.profile"
    mode: "644"
    force: true
    content: |
      #
      #
      # ANSIBLE MANAGED

      export PYENV_ROOT="{{ _jenkins_pyenv_root_path }}"
      export PATH="${PYENV_ROOT}/bin:${PATH}"
      eval "$(pyenv init --path)"
  become: true
  become_user: root

- name: Create root's .bashrc
  ansible.builtin.copy:
    dest: "{{ _roots_home }}/.bashrc"
    mode: "644"
    force: true
    content: |
      #
      #
      # ANSIBLE MANAGED

      # not anticipating to login as root, so .profile must be read first
      [ -r "${HOME}/.profile" ] && . "${HOME}/.profile"

      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"
  become: true
  become_user: root

- name: Create the jenkins user
  ansible.builtin.user:
    name: "{{ altaria_jenkins_system_user }}"
    state: present
    home: /home/{{ altaria_jenkins_system_user }}
    shell: /bin/bash
    password: "{{ altaria_jenkins_system_user_password }}"
  become: true
  become_user: root

- name: Create the altaria_jenkins_system_user's .profile
  ansible.builtin.copy:
    dest: "{{ _altaria_jenkins_system_user_home }}/.profile"
    mode: "644"
    force: true
    content: |
      #
      #
      # ANSIBLE MANAGED

      export PYENV_ROOT="{{ _jenkins_pyenv_root_path }}"
      export PATH="${PYENV_ROOT}/bin:${PATH}"
      eval "$(pyenv init --path)"

      # if running bash
      if [ -n "${BASH_VERSION}" ]; then
          if [ -f "${HOME}/.bashrc" ]; then
              . "${HOME}/.bashrc"
          fi
      fi
  become: true
  become_user: root

- name: Append pyenv setup to the altaria_jenkins_system_user's .bashrc
  ansible.builtin.import_role:
    name: cavcrosby.general.common
    tasks_from: managed_blockinfile
  vars:
    path: "{{ _altaria_jenkins_system_user_home }}/.bashrc"
    block_identifier: "pyenv setup"
    block_text: |
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"
  become: true
  become_user: root

- name: Create the altaria_jenkins_system_user's .ssh directory
  ansible.builtin.file:
    path: "{{ _altaria_jenkins_system_user_home }}/.ssh"
    owner: "{{ altaria_jenkins_system_user }}"
    group: "{{ altaria_jenkins_system_user }}"
    state: directory
    mode: "700"
  become: true
  become_user: root

- name: Create ssh config file for altaria_jenkins_system_user
  ansible.builtin.copy:
    dest: "{{ _altaria_jenkins_system_user_home }}/.ssh/config"
    owner: "{{ altaria_jenkins_system_user }}"
    group: "{{ altaria_jenkins_system_user }}"
    mode: "600"
    content: |
      #
      #
      # ANSIBLE MANAGED

      Host github.com
          HostName github.com
          User git
          IdentityFile ~/.ssh/id_rsa_github
  become: true
  become_user: root

- name: Add the private SSH key that can read/write from GitHub repos
  ansible.builtin.copy:
    dest: "{{ _altaria_jenkins_system_user_home }}/.ssh/id_rsa_github"
    src: "{{ github_key_controller_path }}"
    owner: "{{ altaria_jenkins_system_user }}"
    group: "{{ altaria_jenkins_system_user }}"
    mode: "600"
  become: true
  become_user: root

- name: Write the github.com host key to known_hosts
  ansible.builtin.shell: ssh-keyscan -H github.com >> ~/.ssh/known_hosts
  become: true
  become_user: "{{ altaria_jenkins_system_user }}"
  changed_when: false
    
- name: Create the gps configuration file
  ansible.builtin.template:
    src: gps.json.j2
    dest: "{{ gps_config_file_path }}"
    owner: "{{ altaria_jenkins_system_user }}"
    group: "{{ altaria_jenkins_system_user }}"
    mode: "600"
  become: true
  become_user: root

- name: Register the {{ _jenkins_pyenv_root_path }} file inode
  ansible.builtin.stat:
    path: "{{ _jenkins_pyenv_root_path }}"
  register: jenkins_pyenv_root_inode

# MONITOR(cavcrosby): I anticipate that eventually I will no longer need to use
# my forked version of the pyenv-installer repo. This depends ultimately on the
# outcome of a particular pull request. Once a outcome is determined, this section
# should be updated.
# https://github.com/pyenv/pyenv-installer/pull/126
#
# - name: Grab the pyenv installer
#   ansible.builtin.get_url:
#     url: https://pyenv.run
#     dest: "{{ _pyenv_installer_path }}"
#     mode: "755"
#   when: not jenkins_pyenv_root_inode.stat.exists

- name: Checkout my pyenv-installer forked repo
  block:
    - name: Checkout the {{ repo_name }} repo
      ansible.builtin.git:
        dest: "{{ repo_dst }}"
        repo: "{{ repo_url }}"
        force: true
        version: pyenv-install-tag
      become: true
      become_user: root

    - name: Copy the pyenv-installer to its intended location
      ansible.builtin.copy:
        dest: "{{ _pyenv_installer_path }}"
        src: "{{ repo_dst }}/bin/pyenv-installer"
        remote_src: true
        mode: "755"
      become: true
      become_user: root

  vars:
    - repo_name: pyenv-installer
    - repo_url: https://github.com/cavcrosby/pyenv-installer
    - repo_dst: "{{ _altaria_jenkins_system_user_home }}/{{ repo_name }}"

- name: Get the running pyenv version
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail 
      . {{ _roots_home }}/.bashrc && pyenv --version | awk '{print "v"$2}'
  become: true
  become_user: root
  register: running_pyenv_version
  failed_when: false
  changed_when: false

- name: Remove pyenv from the system
  ansible.builtin.file:
    state: absent
    path: "{{ _jenkins_pyenv_root_path }}"
  become: true
  become_user: root
  when: running_pyenv_version.stdout != pyenv_version

- name: Run the pyenv installer
  ansible.builtin.command: "{{ _pyenv_installer_path }}"
  environment:
    PYENV_ROOT: "{{ _jenkins_pyenv_root_path }}"
    PYENV_GIT_TAG: "{{ pyenv_version }}"
  become: true
  become_user: root
  when: not jenkins_pyenv_root_inode.stat.exists
        or running_pyenv_version.stdout != pyenv_version

- name: Install a Python interpreter to be managed by pyenv
  ansible.builtin.shell: |
    . {{ _roots_home }}/.bashrc && pyenv install {{ default_pyenv_python }}
  become: true
  become_user: root
  when: not jenkins_pyenv_root_inode.stat.exists

- name: Give ownership of {{ _jenkins_pyenv_root_path }} to the altaria_jenkins_system_user
  ansible.builtin.file:
    path: "{{ _jenkins_pyenv_root_path }}"
    recurse: true
    owner: "{{ altaria_jenkins_system_user }}"
    group: "{{ altaria_jenkins_system_user }}"
    state: directory
  become: true
  become_user: root

- name: Create jenkins-agent {{ jenkins_main_node_workingdir }} directory
  ansible.builtin.file:
    path: /var/lib/jenkins-agent/{{ jenkins_main_node_workingdir }}
    recurse: true
    owner: "{{ altaria_jenkins_system_user }}"
    group: "{{ altaria_jenkins_system_user }}"
    state: directory
    mode: "755"
  become: true
  become_user: root
  changed_when: false

- name: Connect to a Jenkins instance
  ansible.builtin.import_role:
    name: cavcrosby.general.jenkins
    tasks_from: connect_to
  vars:
    jenkins_system_user: "{{ altaria_jenkins_system_user }}"
    jenkins_system_user_home: "{{ _altaria_jenkins_system_user_home }}"
    jenkins_system_user_password: "{{ altaria_jenkins_system_user_password }}"
    jenkins_main_node_url: http://{{ jenkins_main_node_ipv4_addr }}:{{ jenkins_main_node_port }}
    jenkins_agent_name: "{{ ansible_lxd_host }}"
    jenkins_username: "{{ jenkins_main_node_admin_id }}"
    jenkins_password: "{{ jenkins_main_node_admin_password }}"
    jenkins_workingdir: /var/lib/jenkins-agent/{{ jenkins_main_node_workingdir }}
  become: true
  # Regardless what portion of the role's tasks use/not use become, need to make
  # sure tasks become the right privileged user.
  become_user: root
