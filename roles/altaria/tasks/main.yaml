---
- name: Create altaria's data directory
  ansible.builtin.file:
    path: "{{ _altaria_data_dir }}"
    state: directory
    mode: "700"
  become: yes
  register: creating_altaria_source_dir_check
  changed_when: creating_altaria_source_dir_check.state == "absent"

# This list is specific to Ubuntu/Debian at the moment. Can be expanded to a vars
# directory to install dependencies based on the distro.
- name: Install pyenv dependencies
  ansible.builtin.apt:
    name:
      - build-essential
      - curl
      - git
      - libbz2-dev
      - libffi-dev
      - liblzma-dev
      - libncurses5-dev
      - libncursesw5-dev
      - libreadline-dev
      - libsqlite3-dev
      - libssl-dev
      - llvm
      - make
      - python3-openssl
      - tk-dev
      - wget
      - xz-utils
      - zlib1g-dev
    state: present
    update_cache: yes
  become: yes

- name: Install system dependencies
  ansible.builtin.apt:
    pkg:
      - openjdk-11-jre-headless
    state: present
    update_cache: yes
  become: yes

- name: Create root's .profile
  ansible.builtin.copy:
    dest: "{{ _roots_home }}/.profile"
    mode: "644"
    force: yes
    content: |
      #
      #
      # ANSIBLE MANAGED

      export PYENV_ROOT="{{ _jenkins_pyenv_root_path }}"
      export PATH="${PYENV_ROOT}/bin:${PATH}"
      eval "$(pyenv init --path)"

- name: Create root's .bashrc
  ansible.builtin.copy:
    dest: "{{ _roots_home }}/.bashrc"
    mode: "644"
    force: yes
    content: |
      #
      #
      # ANSIBLE MANAGED

      # not anticipating to login as root, so .profile must be read first
      [ -r "${HOME}/.profile" ] && . "${HOME}/.profile"

      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"

- name: Create jenkins user
  ansible.builtin.user:
    name: "{{ jenkins_user }}"
    state: present
    home: /home/{{ jenkins_user }}
    shell: /bin/bash
    password: '$6$1234$B4Ea6.5maChxdHpoCfkYFc8J7w8gfAowUfyjuATHSPawgcRn.jJExi6itqEhSMJLGdwTxKRlHX1XZ/SmDufT0.'
  become: yes

- name: Create {{ jenkins_user }}'s .profile
  ansible.builtin.copy:
    dest: "{{ _jenkins_user_home }}/.profile"
    mode: "644"
    force: yes
    content: |
      #
      #
      # ANSIBLE MANAGED

      export PYENV_ROOT="{{ _jenkins_pyenv_root_path }}"
      export PATH="${PYENV_ROOT}/bin:${PATH}"
      eval "$(pyenv init --path)"

      # if running bash
      if [ -n "${BASH_VERSION}" ]; then
          if [ -f "${HOME}/.bashrc" ]; then
              . "${HOME}/.bashrc"
          fi
      fi

- name: Append pyenv setup to {{ jenkins_user }}'s .bashrc
  ansible.builtin.import_role:
    name: common
    tasks_from: managed_blockinfile
  vars:
    path: "{{ _jenkins_user_home }}/.bashrc"
    block_identifier: "pyenv setup"
    block_text: |
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"

- name: Check if the {{ _jenkins_pyenv_root_path }} exists
  ansible.builtin.stat:
    path: "{{ _jenkins_pyenv_root_path }}"
  register: jenkins_pyenv_root_check

- name: Grab the pyenv installer
  ansible.builtin.get_url:
    url: https://pyenv.run
    dest: "{{ _pyenv_installer_path }}"
    mode: "755"
  when: not jenkins_pyenv_root_check.stat.exists

- name: Run the pyenv installer
  ansible.builtin.shell: "{{ _pyenv_installer_path }}"
  environment:
    PYENV_ROOT: "{{ _jenkins_pyenv_root_path }}"
  when: not jenkins_pyenv_root_check.stat.exists

- name: Give ownership {{ _jenkins_pyenv_root_path }} to {{ jenkins_user }}
  ansible.builtin.file:
    path: "{{ _jenkins_pyenv_root_path }}"
    recurse: yes
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_user }}"
  when: not jenkins_pyenv_root_check.stat.exists

- name: Install a Python interpreter to be managed by pyenv
  ansible.builtin.shell: . {{ _roots_home }}/.bashrc && pyenv install {{ default_pyenv_python }}
  when: not jenkins_pyenv_root_check.stat.exists

- name: Add jenkins user to sudoers
  ansible.builtin.copy:
    dest: /etc/sudoers.d/ansible-altaria
    content: |
      # ANSIBLE MANAGED
      {{ jenkins_user }}   ALL=(ALL:ALL) ALL
    mode: "440"
  become: yes

- name: Create jenkins-agent node1 directory
  ansible.builtin.file:
    path: /var/lib/jenkins-agent/node1
    state: directory
    mode: "755"
  become: yes
